{"version":3,"sources":["lib/ContentEditable.tsx","App.tsx","index.tsx"],"names":["ContentEditable","lastHtml","props","value","el","getEl","innerRef","current","emitEvent","originalEvent","html","innerHTML","onChange","event","target","nextProps","this","checkUpdate","cursor","document","createTextNode","appendChild","isFocused","activeElement","nodeValue","selection","window","getSelection","range","createRange","setStart","length","collapse","removeAllRanges","addRange","HTMLElement","focus","replaceCaret","tagName","passProps","createElement","ref","node","contentEditable","disabled","onInput","onBlur","onKeyUp","onKeyDown","dangerouslySetInnerHTML","__html","children","Component","App","useState","setValue","style","border","height","e","console","log","ReactDOM","render","getElementById"],"mappings":"+NAkHeA,E,4MAzELC,SAAmB,EAAKC,MAAMC,OAAS,G,EACvCC,GAAyB,K,EAmBjCC,MAAQ,WAA2B,IAC1BC,EAAY,EAAKJ,MAAjBI,SAEP,OAAMA,GAAgC,oBAAbA,EAChBA,EAASC,QAGX,EAAKH,I,EAGdI,UAAY,SAACC,GACX,IAAML,EAAK,EAAKC,QAEhB,GAAKD,EAAL,CAEA,IAAMM,EAAON,EAAGO,UAChB,GAAI,EAAKT,MAAMU,UAAYF,IAAS,EAAKT,SAAU,CACjD,IAAMY,EAAK,2BACNJ,GADM,IAETK,OAAO,2BACFL,EAAcK,QADb,IAEFX,MAAOO,GAAQ,OAGrB,EAAKR,MAAMU,SAASC,GAGtB,EAAKZ,SAAWS,I,2DA5ClB,SAAsBK,GACpB,OAAIC,KAAKd,MAAMe,aACND,KAAKd,MAAMe,YAAYF,EAAWC,KAAKd,S,gCAKlD,WACE,IAAME,EAAKY,KAAKX,QAEXD,IAELY,KAAKf,SAAWe,KAAKd,MAAMC,OAAS,GAxCnB,SAACC,GAEpB,IAAMc,EAASC,SAASC,eAAe,IACvChB,EAAGiB,YAAYH,GAGf,IAAMI,EAAYH,SAASI,gBAAkBnB,EAC7C,GAAe,OAAXc,GAAwC,OAArBA,EAAOM,WAAuBF,EAArD,CAGA,IAAMG,EAAYC,OAAOC,eACzB,GAAkB,OAAdF,EAAoB,CACtB,IAAMG,EAAQT,SAASU,cACvBD,EAAME,SAASZ,EAAQA,EAAOM,UAAUO,QACxCH,EAAMI,UAAS,GAEfP,EAAUQ,kBACVR,EAAUS,SAASN,GAIjBxB,aAAc+B,aAAa/B,EAAGgC,SAqBhCC,CAAajC,M,oBAiCf,WAAU,IAAD,SAC0CY,KAAKd,MAA/CoC,EADA,EACAA,QAASnC,EADT,EACSA,MAAOG,EADhB,EACgBA,SAAaiC,EAD7B,8CAGP,OAAOC,wBACLF,GAAW,MADO,YAAC,eAGdC,GAHa,IAIhBE,IAAyB,oBAAbnC,EAA0B,SAACoC,GACrCpC,EAASoC,GACT,EAAKtC,GAAKsC,GACRpC,GAAY,KAChBqC,iBAAkB3B,KAAKd,MAAM0C,SAC7BC,QAAS7B,KAAKR,UACdsC,OAAQ9B,KAAKd,MAAM4C,QAAU9B,KAAKR,UAClCuC,QAAS/B,KAAKd,MAAM6C,SAAW/B,KAAKR,UACpCwC,UAAWhC,KAAKd,MAAM8C,WAAahC,KAAKR,UACxCyC,wBAAyB,CAACC,OAAQ/C,GAAS,MAE7Ca,KAAKd,MAAMiD,c,GArEaC,a,OCtBfC,MAff,WAAgB,IAAD,EACaC,mBAAS,iCADtB,mBACNnD,EADM,KACCoD,EADD,KAQb,OACE,qBAAKC,MAAO,CAAEC,OAAQ,mBAAtB,SACE,cAAC,EAAD,CAAiBb,UAAU,EAAOY,MAAO,CAAEE,OAAQ,KAAOvD,MAAOA,EAAOS,SAP3D,SAAC+C,GAChBC,QAAQC,IAAI,SAAUF,EAAE7C,OAAOX,OAC/BoD,EAASI,EAAE7C,OAAOX,aCJtB2D,IAASC,OAAO,cAAC,EAAD,IAAS5C,SAAS6C,eAAe,W","file":"static/js/main.7b1cd216.chunk.js","sourcesContent":["import React, {createElement, HTMLAttributes, SyntheticEvent} from 'react'\nimport {Component} from \"react\"\n\nexport type ContentEditableEvent = SyntheticEvent<any, Event> & {\n  target: { value: string }\n};\n\ninterface Props extends HTMLAttributes<HTMLElement> {\n  tagName?: string\n  disabled?: boolean\n  value?: string\n  onChange?: (e: ContentEditableEvent) => void\n  innerRef?: React.RefObject<HTMLDivElement> | Function\n  checkUpdate?: (nextProps: Props, thisProps: Props) => boolean\n}\n\nconst replaceCaret = (el: HTMLElement) => {\n  // 创建光标\n  const cursor = document.createTextNode('')\n  el.appendChild(cursor)\n\n  // 判断是否选中\n  const isFocused = document.activeElement === el\n  if (cursor === null || cursor.nodeValue === null || !isFocused) return\n\n  // 将光标放到最后\n  const selection = window.getSelection()\n  if (selection !== null) {\n    const range = document.createRange()\n    range.setStart(cursor, cursor.nodeValue.length)\n    range.collapse(true)\n\n    selection.removeAllRanges()\n    selection.addRange(range)\n  }\n\n  // 重新 focus\n  if (el instanceof HTMLElement) el.focus()\n}\n\nclass ContentEditable extends Component<Props> {\n  private lastHtml: string = this.props.value || ''\n  private el: HTMLElement | null = null\n\n  shouldComponentUpdate(nextProps: Readonly<Props>): boolean {\n    if (this.props.checkUpdate) {\n      return this.props.checkUpdate(nextProps, this.props)\n    }\n    return true\n  }\n\n  componentDidUpdate() {\n    const el = this.getEl()\n\n    if (!el) return\n\n    this.lastHtml = this.props.value || ''\n\n    replaceCaret(el)\n  }\n\n  getEl = (): HTMLElement | null => {\n    const {innerRef} = this.props\n\n    if (!!innerRef && typeof innerRef !== 'function') {\n      return innerRef.current\n    }\n\n    return this.el\n  }\n\n  emitEvent = (originalEvent: SyntheticEvent<any>) => {\n    const el = this.getEl()\n\n    if (!el) return\n\n    const html = el.innerHTML\n    if (this.props.onChange && html !== this.lastHtml) {\n      const event = {\n        ...originalEvent,\n        target: {\n          ...originalEvent.target,\n            value: html || ''\n        }\n      }\n      this.props.onChange(event)\n    }\n\n    this.lastHtml = html\n  }\n\n  render() {\n    const {tagName, value, innerRef, ...passProps} = this.props\n\n    return createElement(\n      tagName || 'div',\n      {\n        ...passProps,\n        ref: typeof innerRef === 'function' ? (node: HTMLDivElement) => {\n          innerRef(node)\n          this.el = node\n        } : innerRef || null,\n        contentEditable: !this.props.disabled,\n        onInput: this.emitEvent,\n        onBlur: this.props.onBlur || this.emitEvent,\n        onKeyUp: this.props.onKeyUp || this.emitEvent,\n        onKeyDown: this.props.onKeyDown || this.emitEvent,\n        dangerouslySetInnerHTML: {__html: value || ''}\n      },\n      this.props.children\n    )\n  }\n}\n\nexport default ContentEditable\n","import React, {useState} from 'react'\nimport ContentEditable, {ContentEditableEvent} from \"./lib/ContentEditable\";\n\nfunction App() {\n  const [value, setValue] = useState('<button>Hello</button> 123456');\n\n  const onChange = (e: ContentEditableEvent) => {\n    console.log('change', e.target.value)\n    setValue(e.target.value)\n  }\n\n  return (\n    <div style={{ border: '1px solid black' }}>\n      <ContentEditable disabled={false} style={{ height: 300 }} value={value} onChange={onChange} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}